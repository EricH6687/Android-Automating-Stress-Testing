#!/bin/sh
#GPSOnOff_V2
#Eric Huang 2013


	echo "Testing is started at `date`..."
	`date > "/data/local/tmp/procrank-GPSOn.log"`
	`ps >> "/data/local/tmp/procrank-GPSOn.log"`
	`date > "/data/local/tmp/procrank-GPSOff.log"`
	`ps >> "/data/local/tmp/procrank-GPSOff.log"`
	`date > "/data/local/tmp/meminfo-original.log"`
	`cat /proc/meminfo >> "/data/local/tmp/meminfo-original.log"`
	`echo "------FailureRecord------" >> "/data/local/tmp/FailureRecord.txt"`
	export busyboxpath="/data/local/tmp/busybox"
	export package="android.settings.LOCATION_SOURCE_SETTINGS"
	r=0
	dontstop=0
	GPSOn=0
	GPSOnPass=0
	GPSOnFail=0
	GPSOff=0
	GPSOffPass=0
	GPSOffFail=0

	if [ "$1" == 0 ]
	then
		dontstop=1
	fi

	am start -a $package
	for i in 1 2 3 4 5
		do
			input keyevent 4
		done
	am start -a $package
	for i in 1 2 3
		do
			input keyevent 19
		done
	input keyevent 20
	input keyevent 23
	sleep 5s

	while [ "$r" != `$busyboxpath expr $1 - $dontstop ` ]
		do
			sleep 15s
			export GPSstate=`cat /data/local/tmp/logcat_status.txt|$busyboxpath tail -n 1|$busyboxpath sed 's/^.*Gps://g'|$busyboxpath sed 's/ GNP:.*$//g'`
			if [ "$GPSstate" == "false" ]
				then
					for i in 1 2 3 4 5
						do
							input keyevent 4
						done
					am start -a $package
					sleep 5s
					for i in 1 2 3
						do
							input keyevent 19
						done
					input keyevent 20
					input keyevent 23
					r=`$busyboxpath expr $r + 1 `
					GPSOn=`$busyboxpath expr $GPSOn + 1 `
					echo "Try to turn On GPS : round $GPSOn"
					sleep 5s

					export GPSstate=`cat /data/local/tmp/logcat_status.txt|$busyboxpath tail -n 1|$busyboxpath sed 's/^.*Gps://g'|$busyboxpath sed 's/ GNP:.*$//g'`
					if [ "$GPSstate" == "true" ]
						then
							echo "GPS is On"
							GPSOnPass=`$busyboxpath expr $GPSOnPass + 1 `
							echo "GPS On Pass for $GPSOnPass cycle(s)"
							if [ `$busyboxpath expr $GPSOn % 300 ` -eq 0 ]
								then
									`echo "GPS On Pass for $GPSOnPass cycle(s)" >> "/data/local/tmp/procrank-GPSOn.log"`
									`date >> "/data/local/tmp/procrank-GPSOn.log"`
									`ps >> "/data/local/tmp/procrank-GPSOn.log"`
									echo "Record the memory info"
							fi
						else
							echo "sleep for 20s then check"
							sleep 20s
							export GPSstate=`cat /data/local/tmp/logcat_status.txt|$busyboxpath tail -n 1|$busyboxpath sed 's/^.*Gps://g'|$busyboxpath sed 's/ GNP:.*$//g'`
							if [ "$GPSstate" == "true" ]
								then
									echo "GPS is On"
									GPSOnPass=`$busyboxpath expr $GPSOnPass + 1 `
									echo "GPS On Pass for $GPSOnPass cycle(s)"
									if [ `$busyboxpath expr $GPSOn % 300 ` -eq 0 ]
										then
											`echo "GPS On Pass for $GPSOnPass cycle(s)" >> "/data/local/tmp/procrank-GPSOn.log"`
											`date >> "/data/local/tmp/procrank-GPSOn.log"`
											`ps >> "/data/local/tmp/procrank-GPSOn.log"`
											echo "Record the memory info"
									fi

								else
									echo "Turn On GPS failure"
									GPSOnFail=`$busyboxpath expr $GPSOnFail + 1 `
									echo "GPS On Fail for $GPSOnFail cycle(s)"
									`echo "GPS On Fail for $GPSOnFail cycle(s)" >> "/data/local/tmp/FailureRecord.txt"`
									`date >> "/data/local/tmp/FailureRecord.txt"`
									`screenshot -i /data/local/tmp/screenshot/GPSOnFail_$GPSOnFail.png`
									if [ `$busyboxpath expr $GPSOn % 300 ` -eq 0 ]
										then
											`echo "GPS On Fail for $GPSOnFail cycle(s)" >> "/data/local/tmp/procrank-GPSOn.log"`
											`date >> "/data/local/tmp/procrank-GPSOn.log"`
											`ps >> "/data/local/tmp/procrank-GPSOn.log"`
											echo "Record the memory info"
								fi

							fi
					fi
				else
					for i in 1 2 3 4 5
						do
							input keyevent 4
						done
					am start -a $package
					for i in 1 2 3
						do
							input keyevent 19
						done
					input keyevent 20
					input keyevent 23
					r=`$busyboxpath expr $r + 1 `
					GPSOff=`$busyboxpath expr $GPSOff + 1 `
					echo "Try to turn Off GPS : round $GPSOff"
					sleep 5s

					export GPSstate=`cat /data/local/tmp/logcat_status.txt|$busyboxpath tail -n 1|$busyboxpath sed 's/^.*Gps://g'|$busyboxpath sed 's/ GNP:.*$//g'`
					if [ "$GPSstate" == "false" ]
						then
							echo "GPS is Off"
							GPSOffPass=`$busyboxpath expr $GPSOffPass + 1 `
							echo "GPS Off Pass for $GPSOffPass cycle(s)"
							if [ `$busyboxpath expr $GPSOff % 300 ` -eq 0 ]
								then
									`echo "GPS Off Pass for $GPSOffPass cycle(s)" >> "/data/local/tmp/procrank-GPSOff.log"`
									`date >> "/data/local/tmp/procrank-GPSOff.log"`
									`ps >> "/data/local/tmp/procrank-GPSOff.log"`
									echo "Record the memory info"
							fi
						else
							echo "sleep for 20s then check"
							sleep 20s
							export GPSstate=`cat /data/local/tmp/logcat_status.txt|$busyboxpath tail -n 1|$busyboxpath sed 's/^.*Gps://g'|$busyboxpath sed 's/ GNP:.*$//g'`
							if [ "$GPSstate" == "false" ]
								then
									echo "GPS is Off"
									GPSOffPass=`$busyboxpath expr $GPSOffPass + 1 `
									echo "GPS Off Pass for $GPSOffPass cycle(s)"
									if [ `$busyboxpath expr $GPSOff % 300 ` -eq 0 ]
										then
											`echo "GPS Off Pass for $GPSOffPass cycle(s)" >> "/data/local/tmp/procrank-GPSOff.log"`
											`date >> "/data/local/tmp/procrank-GPSOff.log"`
											`ps >> "/data/local/tmp/procrank-GPSOff.log"`
											echo "Record the memory info"
									fi
								else
									echo "Turn Off GPS failure"
									GPSOffFail=`$busyboxpath expr $GPSOffFail + 1 `
									echo "GPS Off Fail for $GPSOffFail cycle(s)"
									`echo "GPS Off Fail for $GPSOffFail cycle(s)" >> "/data/local/tmp/FailureRecord.txt"`
									`date >> "/data/local/tmp/FailureRecord.txt"`
									`screenshot -i /data/local/tmp/screenshot/GPSOffFail_$GPSOffFail.png`
									if [ `$busyboxpath expr $GPSOff % 300 ` -eq 0 ]
										then
											`echo "GPS Off Fail for $GPSOffFail cycle(s)" >> "/data/local/tmp/procrank-GPSOff.log"`
											`date >> "/data/local/tmp/procrank-GPSOff.log"`
											`ps >> "/data/local/tmp/procrank-GPSOff.log"`
											echo "Record the memory info"
									fi
							fi
					fi
			fi

			echo `date`
			`date > "/data/local/tmp/meminfo-aftertest.log"`
			`cat /proc/meminfo >> "/data/local/tmp/meminfo-aftertest.log"`

			`echo "Total of GPS On Time: $GPSOn round" > "/data/local/tmp/TestResult.txt"`
			`echo "GPS On Pass for $GPSOnPass cycle(s)" >> "/data/local/tmp/TestResult.txt"`
			`echo "GPS On Fail for $GPSOnFail cycle(s)" >> "/data/local/tmp/TestResult.txt"`
			`echo "Total of GPS Off Time: $GPSOff round" >> "/data/local/tmp/TestResult.txt"`
			`echo "GPS Off Pass for $GPSOffPass cycle(s)" >> "/data/local/tmp/TestResult.txt"`
			`echo "GPS Off Fail for $GPSOffFail cycle(s)" >> "/data/local/tmp/TestResult.txt"`
			echo `uptime` >> "/data/local/tmp/TestResult.txt"

		done

		echo "Testing is finish at `date`..."


		for i in 1 2 3 4 5
			do
				input keyevent 4
			done



